@page "/counter"

@inject IJSRuntime js

<h1>Counter</h1>

<p>Current count: @(alerts?.Count() ?? 0)</p>

<button class="btn btn-primary" @onclick="AddAlert">Add alert</button>
<button class="btn btn-primary" @onclick="AddAlertJavaScript">Add alert JavaScript</button>

<ListComponent Items="alerts" Context="alert">
    <NullTemplate>
        <p>Wait till we build this for you</p>
    </NullTemplate>
    <EmptyTemplate>
        <p>Nothing to see here, move on</p>
    </EmptyTemplate>
    <ElementTemplate>
        <AlertMessage DeleteAlert="DeleteAlert" Alert="alert">
            <span>This is an alert @alert</span>
        </AlertMessage>
    </ElementTemplate>
</ListComponent>

@code {
    private List<int> alerts;
    private static int countStatic = 0;
    IJSObjectReference module;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(2000);
        alerts = new List<int>();
    }

    [JSInvokable]
    public async Task AddAlert()
    {
        await js.LogToConsole("Add button was pressed");
        alerts.Add(alerts.DefaultIfEmpty(0).Max() + 1);
        countStatic++;
        await js.InvokeVoidAsync("dotnetStaticInvocation");

        if (alerts.Count() == 10)
        {
            module = await js.InvokeAsync<IJSObjectReference>("import", "./js/Counter.js");
            await module.InvokeVoidAsync("displayAlert", "10 alerts added");
        };
    }

    private async Task AddAlertJavaScript()
        => await js.InvokeVoidAsync("dotnetInstanceInvocation", DotNetObjectReference.Create(this));

    private async Task DeleteAlert(object item)
    {
        await js.LogToConsole($"Delete was pressed for {item}");
        var confirmed = await js.Confirm($"Are you sure you want to delete alert {item}");

        if (confirmed)
        {
            alerts.Remove((int)item);
        }
    }

    [JSInvokable]
    public static Task<int> GetTotalAdded()
    {
        return Task.FromResult(countStatic);
    }

}